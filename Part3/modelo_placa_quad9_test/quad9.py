#!/usr/bin/python
# -*- coding: UTF-8 -*-
from numpy import *
from scipy.linalg import det, inv, norm


def quad9(xy, properties):

	E = properties["E"]
	ν = properties["nu"]
	bx = properties["bx"]
	by = properties["by"]
	t = properties["t"]

	Eσ = E / (1-ν**2) * array(
		[
		[1 , ν , 0       ]       ,
		[ν , 1 , 0       ]       ,
		[0 , 0 , (1-ν)/2 ]
		])

	x0 = xy[0,0]
	x1 = xy[1,0]
	x2 = xy[2,0]
	x3 = xy[3,0]
	x4 = xy[4,0]
	x5 = xy[5,0]
	x6 = xy[6,0]
	x7 = xy[7,0]
	x8 = xy[8,0]

	y0 = xy[0,1]
	y1 = xy[1,1]
	y2 = xy[2,1]
	y3 = xy[3,1]
	y4 = xy[4,1]
	y5 = xy[5,1]
	y6 = xy[6,1]
	y7 = xy[7,1]
	y8 = xy[8,1]

	ke = zeros((18,18))
	fe = zeros((18,1))


	gauss_rule = [
		(   -sqrt(3/5) , -sqrt(3/5), 5/9, 1.0),
		(        0     , -sqrt(3/5), 8/9, 1.0),
		(    sqrt(3/5) , -sqrt(3/5), 5/9, 1.0),
		(   -sqrt(3/5) ,      0    , 5/9, 1.0),
		(        0     ,      0    , 8/9, 1.0),
		(    sqrt(3/5) ,      0    , 5/9, 1.0),
		(   -sqrt(3/5) ,  sqrt(3/5), 5/9, 1.0),
		(        0     ,  sqrt(3/5), 8/9, 1.0),
		(    sqrt(3/5) ,  sqrt(3/5), 5/9, 1.0),
	]

	for ξ, η, wi, wj in gauss_rule:

		# print(f"xi = {xi} eta = {eta}")

		x = x0*(ξ-1)*(η-1)*ξ*η/4.+x1*(ξ+1)*(η-1)*ξ*η/4.+x2*(ξ+1)*(η+1)*ξ*η/4.+x3*(ξ-1)*(η+1)*ξ*η/4.+x4*(1- ξ**2)*(η-1)*η/2.+x5*(1- η**2)*(ξ+1)*ξ/2.+x6*(1- ξ**2)*(η+1)*η/2.+x7*(1- η**2)*(ξ-1)*ξ/2.+x8*(1- ξ**2)*(1- η**2)
		y = y0*(ξ-1)*(η-1)*ξ*η/4.+y1*(ξ+1)*(η-1)*ξ*η/4.+y2*(ξ+1)*(η+1)*ξ*η/4.+y3*(ξ-1)*(η+1)*ξ*η/4.+y4*(1- ξ**2)*(η-1)*η/2.+y5*(1- η**2)*(ξ+1)*ξ/2.+y6*(1- ξ**2)*(η+1)*η/2.+y7*(1- η**2)*(ξ-1)*ξ/2.+y8*(1- ξ**2)*(1- η**2)
		dx_dxi  = 0.25*x0*η*ξ*(η - 1) + 0.25*x0*η*(η - 1)*(ξ - 1) + 0.25*x1*η*ξ*(η - 1) + 0.25*x1*η*(η - 1)*(ξ + 1) + 0.25*x2*η*ξ*(η + 1) + 0.25*x2*η*(η + 1)*(ξ + 1) + 0.25*x3*η*ξ*(η + 1) + 0.25*x3*η*(η + 1)*(ξ - 1) - 1.0*x4*η*ξ*(η - 1) + 0.5*x5*ξ*(1 - η**2) + 0.5*x5*(1 - η**2)*(ξ + 1) - 1.0*x6*η*ξ*(η + 1) + 0.5*x7*ξ*(1 - η**2) + 0.5*x7*(1 - η**2)*(ξ - 1) - 2*x8*ξ*(1 - η**2)
		dx_deta = 0.25*x0*η*ξ*(ξ - 1) + 0.25*x0*ξ*(η - 1)*(ξ - 1) + 0.25*x1*η*ξ*(ξ + 1) + 0.25*x1*ξ*(η - 1)*(ξ + 1) + 0.25*x2*η*ξ*(ξ + 1) + 0.25*x2*ξ*(η + 1)*(ξ + 1) + 0.25*x3*η*ξ*(ξ - 1) + 0.25*x3*ξ*(η + 1)*(ξ - 1) + 0.5*x4*η*(1 - ξ**2) + 0.5*x4*(1 - ξ**2)*(η - 1) - 1.0*x5*η*ξ*(ξ + 1) + 0.5*x6*η*(1 - ξ**2) + 0.5*x6*(1 - ξ**2)*(η + 1) - 1.0*x7*η*ξ*(ξ - 1) - 2*x8*η*(1 - ξ**2)
		dy_dxi  = 0.25*y0*η*ξ*(η - 1) + 0.25*y0*η*(η - 1)*(ξ - 1) + 0.25*y1*η*ξ*(η - 1) + 0.25*y1*η*(η - 1)*(ξ + 1) + 0.25*y2*η*ξ*(η + 1) + 0.25*y2*η*(η + 1)*(ξ + 1) + 0.25*y3*η*ξ*(η + 1) + 0.25*y3*η*(η + 1)*(ξ - 1) - 1.0*y4*η*ξ*(η - 1) + 0.5*y5*ξ*(1 - η**2) + 0.5*y5*(1 - η**2)*(ξ + 1) - 1.0*y6*η*ξ*(η + 1) + 0.5*y7*ξ*(1 - η**2) + 0.5*y7*(1 - η**2)*(ξ - 1) - 2*y8*ξ*(1 - η**2)
		dy_deta = 0.25*y0*η*ξ*(ξ - 1) + 0.25*y0*ξ*(η - 1)*(ξ - 1) + 0.25*y1*η*ξ*(ξ + 1) + 0.25*y1*ξ*(η - 1)*(ξ + 1) + 0.25*y2*η*ξ*(ξ + 1) + 0.25*y2*ξ*(η + 1)*(ξ + 1) + 0.25*y3*η*ξ*(ξ - 1) + 0.25*y3*ξ*(η + 1)*(ξ - 1) + 0.5*y4*η*(1 - ξ**2) + 0.5*y4*(1 - ξ**2)*(η - 1) - 1.0*y5*η*ξ*(ξ + 1) + 0.5*y6*η*(1 - ξ**2) + 0.5*y6*(1 - ξ**2)*(η + 1) - 1.0*y7*η*ξ*(ξ - 1) - 2*y8*η*(1 - ξ**2)
		
		dN0_dxi = 0.25*η*ξ*(η - 1) + 0.25*η*(η - 1)*(ξ - 1)
		dN1_dxi = 0.25*η*ξ*(η - 1) + 0.25*η*(η - 1)*(ξ + 1)
		dN2_dxi = 0.25*η*ξ*(η + 1) + 0.25*η*(η + 1)*(ξ + 1)
		dN3_dxi = 0.25*η*ξ*(η + 1) + 0.25*η*(η + 1)*(ξ - 1)
		dN4_dxi = -1.0*η*ξ*(η - 1)
		dN5_dxi = 0.5*ξ*(1 - η**2) + (1 - η**2)*(0.5*ξ + 0.5)
		dN6_dxi = -1.0*η*ξ*(η + 1)
		dN7_dxi = 0.5*ξ*(1 - η**2) + (0.5 - 0.5*η**2)*(ξ - 1)
		dN8_dxi = -2*ξ*(1 - η**2)

		dN0_deta = 0.25*η*ξ*(ξ - 1) + 0.25*ξ*(η - 1)*(ξ - 1)
		dN1_deta = 0.25*η*ξ*(ξ + 1) + 0.25*ξ*(η - 1)*(ξ + 1)
		dN2_deta = 0.25*η*ξ*(ξ + 1) + 0.25*ξ*(η + 1)*(ξ + 1)
		dN3_deta = 0.25*η*ξ*(ξ - 1) + 0.25*ξ*(η + 1)*(ξ - 1)
		dN4_deta = 0.5*η*(1 - ξ**2) + (0.5 - 0.5*ξ**2)*(η - 1)
		dN5_deta = -1.0*η*ξ*(ξ + 1)
		dN6_deta = 0.5*η*(1 - ξ**2) + (1 - ξ**2)*(0.5*η + 0.5)
		dN7_deta = -1.0*η*ξ*(ξ - 1)
		dN8_deta = -2*η*(1 - ξ**2)

		# print(f"x = {x} y = {y}")

		J = array([
		[dx_dxi, dx_deta],
		[dy_dxi, dy_deta]
		]).T

		detJ = det(J)

		if detJ <= 0.:
			print(f"FATAL! detJ <= 0...")
			exit(-1)

		Jinv = inv(J)

		# print(f"J = {J}")
		# print(f"detJ = {detJ}")

		dN0_dxy = Jinv@array([ dN0_dxi, dN0_deta ])
		dN1_dxy = Jinv@array([ dN1_dxi, dN1_deta ])
		dN2_dxy = Jinv@array([ dN2_dxi, dN2_deta ])
		dN3_dxy = Jinv@array([ dN3_dxi, dN3_deta ])
		dN4_dxy = Jinv@array([ dN4_dxi, dN4_deta ])
		dN5_dxy = Jinv@array([ dN5_dxi, dN5_deta ])
		dN6_dxy = Jinv@array([ dN6_dxi, dN6_deta ])
		dN7_dxy = Jinv@array([ dN7_dxi, dN7_deta ])
		dN8_dxy = Jinv@array([ dN8_dxi, dN8_deta ])

		# ε = B ue
		B = zeros((3, 18))
		B[0,0] = dN0_dxy[0]
		B[1,1] = dN0_dxy[1]
		B[2,0] = dN0_dxy[1]
		B[2,1] = dN0_dxy[0]
		B[0,2] = dN1_dxy[0]
		B[1,3] = dN1_dxy[1]
		B[2,2] = dN1_dxy[1]
		B[2,3] = dN1_dxy[0]
		B[0,4] = dN2_dxy[0]
		B[1,5] = dN2_dxy[1]
		B[2,4] = dN2_dxy[1]
		B[2,5] = dN2_dxy[0]
		B[0,6] = dN3_dxy[0]
		B[1,7] = dN3_dxy[1]
		B[2,6] = dN3_dxy[1]
		B[2,7] = dN3_dxy[0]

		B[0,8] = dN4_dxy[0]
		B[1,9] = dN4_dxy[1]
		B[2,8] = dN4_dxy[1]
		B[2,9] = dN4_dxy[0]
		B[0,10] = dN5_dxy[0]
		B[1,11] = dN5_dxy[1]
		B[2,10] = dN5_dxy[1]
		B[2,11] = dN5_dxy[0]
		B[0,12] = dN6_dxy[0]
		B[1,13] = dN6_dxy[1]
		B[2,12] = dN6_dxy[1]
		B[2,13] = dN6_dxy[0]
		B[0,14] = dN7_dxy[0]
		B[1,15] = dN7_dxy[1]
		B[2,14] = dN7_dxy[1]
		B[2,15] = dN7_dxy[0]
		B[0,16] = dN8_dxy[0]
		B[1,17] = dN8_dxy[1]
		B[2,16] = dN8_dxy[1]
		B[2,17] = dN8_dxy[0]

		# print(f"B = {B}")


		ke += t * wi * wj * B.T @ Eσ @ B * detJ


	return ke, fe


def quad9_post(xy, u_e, properties):
	E = properties["E"]
	ν = properties["nu"]
	bx = properties["bx"]
	by = properties["by"]
	t = properties["t"]

	#Podemos pasarle otros valores de xi y eta
	if "xi" in properties:
		ξ = properties["xi"]
	else:
		ξ = 0.0

	if "eta" in properties:
		η = properties["eta"]
	else:
		η = 0.0

	Eσ = E / (1-ν**2) * array(
		[
		[1 , ν , 0       ]       ,
		[ν , 1 , 0       ]       ,
		[0 , 0 , (1-ν)/2 ]
		])

	x0 = xy[0,0]
	x1 = xy[1,0]
	x2 = xy[2,0]
	x3 = xy[3,0]
	x4 = xy[4,0]
	x5 = xy[5,0]
	x6 = xy[6,0]
	x7 = xy[7,0]
	x8 = xy[8,0]

	y0 = xy[0,1]
	y1 = xy[1,1]
	y2 = xy[2,1]
	y3 = xy[3,1]
	y4 = xy[4,1]
	y5 = xy[5,1]
	y6 = xy[6,1]
	y7 = xy[7,1]
	y8 = xy[8,1]

	x = x0*(ξ-1)*(η-1)*ξ*η/4.+x1*(ξ+1)*(η-1)*ξ*η/4.+x2*(ξ+1)*(η+1)*ξ*η/4.+x3*(ξ-1)*(η+1)*ξ*η/4.+x4*(1- ξ**2)*(η-1)*η/2.+x5*(1- η**2)*(ξ+1)*ξ/2.+x6*(1- ξ**2)*(η+1)*η/2.+x7*(1- η**2)*(ξ-1)*ξ/2.+x8*(1- ξ**2)*(1- η**2)
	y = y0*(ξ-1)*(η-1)*ξ*η/4.+y1*(ξ+1)*(η-1)*ξ*η/4.+y2*(ξ+1)*(η+1)*ξ*η/4.+y3*(ξ-1)*(η+1)*ξ*η/4.+y4*(1- ξ**2)*(η-1)*η/2.+y5*(1- η**2)*(ξ+1)*ξ/2.+y6*(1- ξ**2)*(η+1)*η/2.+y7*(1- η**2)*(ξ-1)*ξ/2.+y8*(1- ξ**2)*(1- η**2)
	dx_dxi  = 0.25*x0*η*ξ*(η - 1) + 0.25*x0*η*(η - 1)*(ξ - 1) + 0.25*x1*η*ξ*(η - 1) + 0.25*x1*η*(η - 1)*(ξ + 1) + 0.25*x2*η*ξ*(η + 1) + 0.25*x2*η*(η + 1)*(ξ + 1) + 0.25*x3*η*ξ*(η + 1) + 0.25*x3*η*(η + 1)*(ξ - 1) - 1.0*x4*η*ξ*(η - 1) + 0.5*x5*ξ*(1 - η**2) + 0.5*x5*(1 - η**2)*(ξ + 1) - 1.0*x6*η*ξ*(η + 1) + 0.5*x7*ξ*(1 - η**2) + 0.5*x7*(1 - η**2)*(ξ - 1) - 2*x8*ξ*(1 - η**2)
	dx_deta = 0.25*x0*η*ξ*(ξ - 1) + 0.25*x0*ξ*(η - 1)*(ξ - 1) + 0.25*x1*η*ξ*(ξ + 1) + 0.25*x1*ξ*(η - 1)*(ξ + 1) + 0.25*x2*η*ξ*(ξ + 1) + 0.25*x2*ξ*(η + 1)*(ξ + 1) + 0.25*x3*η*ξ*(ξ - 1) + 0.25*x3*ξ*(η + 1)*(ξ - 1) + 0.5*x4*η*(1 - ξ**2) + 0.5*x4*(1 - ξ**2)*(η - 1) - 1.0*x5*η*ξ*(ξ + 1) + 0.5*x6*η*(1 - ξ**2) + 0.5*x6*(1 - ξ**2)*(η + 1) - 1.0*x7*η*ξ*(ξ - 1) - 2*x8*η*(1 - ξ**2)
	dy_dxi  = 0.25*y0*η*ξ*(η - 1) + 0.25*y0*η*(η - 1)*(ξ - 1) + 0.25*y1*η*ξ*(η - 1) + 0.25*y1*η*(η - 1)*(ξ + 1) + 0.25*y2*η*ξ*(η + 1) + 0.25*y2*η*(η + 1)*(ξ + 1) + 0.25*y3*η*ξ*(η + 1) + 0.25*y3*η*(η + 1)*(ξ - 1) - 1.0*y4*η*ξ*(η - 1) + 0.5*y5*ξ*(1 - η**2) + 0.5*y5*(1 - η**2)*(ξ + 1) - 1.0*y6*η*ξ*(η + 1) + 0.5*y7*ξ*(1 - η**2) + 0.5*y7*(1 - η**2)*(ξ - 1) - 2*y8*ξ*(1 - η**2)
	dy_deta = 0.25*y0*η*ξ*(ξ - 1) + 0.25*y0*ξ*(η - 1)*(ξ - 1) + 0.25*y1*η*ξ*(ξ + 1) + 0.25*y1*ξ*(η - 1)*(ξ + 1) + 0.25*y2*η*ξ*(ξ + 1) + 0.25*y2*ξ*(η + 1)*(ξ + 1) + 0.25*y3*η*ξ*(ξ - 1) + 0.25*y3*ξ*(η + 1)*(ξ - 1) + 0.5*y4*η*(1 - ξ**2) + 0.5*y4*(1 - ξ**2)*(η - 1) - 1.0*y5*η*ξ*(ξ + 1) + 0.5*y6*η*(1 - ξ**2) + 0.5*y6*(1 - ξ**2)*(η + 1) - 1.0*y7*η*ξ*(ξ - 1) - 2*y8*η*(1 - ξ**2)
	

	dN0_dxi = 0.25*η*ξ*(η - 1) + 0.25*η*(η - 1)*(ξ - 1)
	dN1_dxi = 0.25*η*ξ*(η - 1) + 0.25*η*(η - 1)*(ξ + 1)
	dN2_dxi = 0.25*η*ξ*(η + 1) + 0.25*η*(η + 1)*(ξ + 1)
	dN3_dxi = 0.25*η*ξ*(η + 1) + 0.25*η*(η + 1)*(ξ - 1)
	dN4_dxi = -1.0*η*ξ*(η - 1)
	dN5_dxi = 0.5*ξ*(1 - η**2) + (1 - η**2)*(0.5*ξ + 0.5)
	dN6_dxi = -1.0*η*ξ*(η + 1)
	dN7_dxi = 0.5*ξ*(1 - η**2) + (0.5 - 0.5*η**2)*(ξ - 1)
	dN8_dxi = -2*ξ*(1 - η**2)

	dN0_deta = 0.25*η*ξ*(ξ - 1) + 0.25*ξ*(η - 1)*(ξ - 1)
	dN1_deta = 0.25*η*ξ*(ξ + 1) + 0.25*ξ*(η - 1)*(ξ + 1)
	dN2_deta = 0.25*η*ξ*(ξ + 1) + 0.25*ξ*(η + 1)*(ξ + 1)
	dN3_deta = 0.25*η*ξ*(ξ - 1) + 0.25*ξ*(η + 1)*(ξ - 1)
	dN4_deta = 0.5*η*(1 - ξ**2) + (0.5 - 0.5*ξ**2)*(η - 1)
	dN5_deta = -1.0*η*ξ*(ξ + 1)
	dN6_deta = 0.5*η*(1 - ξ**2) + (1 - ξ**2)*(0.5*η + 0.5)
	dN7_deta = -1.0*η*ξ*(ξ - 1)
	dN8_deta = -2*η*(1 - ξ**2)

	# print(f"x = {x} y = {y}")

	J = array([
	[dx_dxi, dx_deta],
	[dy_dxi, dy_deta]
	]).T

	detJ = det(J)

	if detJ <= 0.:
		print(f"FATAL! detJ <= 0...")
		exit(-1)

	Jinv = inv(J)

	# print(f"J = {J}")
	# print(f"detJ = {detJ}")

	dN0_dxy = Jinv@array([ dN0_dxi, dN0_deta ])
	dN1_dxy = Jinv@array([ dN1_dxi, dN1_deta ])
	dN2_dxy = Jinv@array([ dN2_dxi, dN2_deta ])
	dN3_dxy = Jinv@array([ dN3_dxi, dN3_deta ])
	dN4_dxy = Jinv@array([ dN4_dxi, dN4_deta ])
	dN5_dxy = Jinv@array([ dN5_dxi, dN5_deta ])
	dN6_dxy = Jinv@array([ dN6_dxi, dN6_deta ])
	dN7_dxy = Jinv@array([ dN7_dxi, dN7_deta ])
	dN8_dxy = Jinv@array([ dN8_dxi, dN8_deta ])

	# ε = B ue
	B = zeros((3, 18))
	B[0,0] = dN0_dxy[0]
	B[1,1] = dN0_dxy[1]
	B[2,0] = dN0_dxy[1]
	B[2,1] = dN0_dxy[0]
	B[0,2] = dN1_dxy[0]
	B[1,3] = dN1_dxy[1]
	B[2,2] = dN1_dxy[1]
	B[2,3] = dN1_dxy[0]
	B[0,4] = dN2_dxy[0]
	B[1,5] = dN2_dxy[1]
	B[2,4] = dN2_dxy[1]
	B[2,5] = dN2_dxy[0]
	B[0,6] = dN3_dxy[0]
	B[1,7] = dN3_dxy[1]
	B[2,6] = dN3_dxy[1]
	B[2,7] = dN3_dxy[0]

	B[0,8] = dN4_dxy[0]
	B[1,9] = dN4_dxy[1]
	B[2,8] = dN4_dxy[1]
	B[2,9] = dN4_dxy[0]
	B[0,10] = dN5_dxy[0]
	B[1,11] = dN5_dxy[1]
	B[2,10] = dN5_dxy[1]
	B[2,11] = dN5_dxy[0]
	B[0,12] = dN6_dxy[0]
	B[1,13] = dN6_dxy[1]
	B[2,12] = dN6_dxy[1]
	B[2,13] = dN6_dxy[0]
	B[0,14] = dN7_dxy[0]
	B[1,15] = dN7_dxy[1]
	B[2,14] = dN7_dxy[1]
	B[2,15] = dN7_dxy[0]
	B[0,16] = dN8_dxy[0]
	B[1,17] = dN8_dxy[1]
	B[2,16] = dN8_dxy[1]
	B[2,17] = dN8_dxy[0]

	ε = B @ u_e
	σ = Eσ @ ε

	return ε, σ
def quad9_stress_average(σ,xy, properties):

	x0 = xy[0,0]
	x1 = xy[1,0]
	x2 = xy[2,0]
	x3 = xy[3,0]
	x4 = xy[4,0]
	x5 = xy[5,0]
	x6 = xy[6,0]
	x7 = xy[7,0]
	x8 = xy[8,0]

	y0 = xy[0,1]
	y1 = xy[1,1]
	y2 = xy[2,1]
	y3 = xy[3,1]
	y4 = xy[4,1]
	y5 = xy[5,1]
	y6 = xy[6,1]
	y7 = xy[7,1]
	y8 = xy[8,1]

	M = zeros((9,9))
	gauss = [
		[   -sqrt(3/5) , -sqrt(3/5), 5/9, 0],
		[        0     , -sqrt(3/5), 8/9, 1],
		[    sqrt(3/5) , -sqrt(3/5), 5/9, 2],
		[   -sqrt(3/5) ,      0    , 5/9, 3],
		[        0     ,      0    , 8/9, 4],
		[    sqrt(3/5) ,      0    , 5/9, 5],
		[   -sqrt(3/5) ,  sqrt(3/5), 5/9, 6],
		[        0     ,  sqrt(3/5), 8/9, 7],
		[    sqrt(3/5) ,  sqrt(3/5), 5/9, 8],
		]


	for ξ,η,wi,i in gauss:
		N0 = (ξ-1)*(η-1)*ξ*η/4.
		N1 = (ξ+1)*(η-1)*ξ*η/4.
		N2 = (ξ+1)*(η+1)*ξ*η/4.
		N3 = (ξ-1)*(η+1)*ξ*η/4.
		N4 = (1- ξ**2)*(η-1)*η/2.
		N5 = (1- η**2)*(ξ+1)*ξ/2.
		N6 = (1- ξ**2)*(η+1)*η/2.
		N7 = (1- η**2)*(ξ-1)*ξ/2.
		N8 = (1- ξ**2)*(1- η**2)

		M[:,i] = [N0,N1,N2,N3,N4,N5,N6,N7,N8]
		
	#for ξ,η,i in gauss:
	#	B = array([[(η/4 - 0.25)*(-2*y0*ξ + 2*y0 + 2*y1*ξ + 2*y1 - 2*y2*ξ - 2*y2 + 2*y3*ξ - 2*y3)/(x0*y1*η - x0*y1 - x0*y2*η + x0*y2*ξ - x0*y3*ξ + x0*y3 - x1*y0*η + x1*y0 - x1*y2*ξ - x1*y2 + x1*y3*η + x1*y3*ξ + x2*y0*η - x2*y0*ξ + x2*y1*ξ + x2*y1 - x2*y3*η - x2*y3 + x3*y0*ξ - x3*y0 - x3*y1*η - x3*y1*ξ + x3*y2*η + x3*y2) + (ξ/4 - 0.25)*(2*y0*η - 2*y0 - 2*y1*η + 2*y1 + 2*y2*η + 2*y2 - 2*y3*η - 2*y3)/(x0*y1*η - x0*y1 - x0*y2*η + x0*y2*ξ - x0*y3*ξ + x0*y3 - x1*y0*η + x1*y0 - x1*y2*ξ - x1*y2 + x1*y3*η + x1*y3*ξ + x2*y0*η - x2*y0*ξ + x2*y1*ξ + x2*y1 - x2*y3*η - x2*y3 + x3*y0*ξ - x3*y0 - x3*y1*η - x3*y1*ξ + x3*y2*η + x3*y2), 0, (0.25 - η/4)*(-2*y0*ξ + 2*y0 + 2*y1*ξ + 2*y1 - 2*y2*ξ - 2*y2 + 2*y3*ξ - 2*y3)/(x0*y1*η - x0*y1 - x0*y2*η + x0*y2*ξ - x0*y3*ξ + x0*y3 - x1*y0*η + x1*y0 - x1*y2*ξ - x1*y2 + x1*y3*η + x1*y3*ξ + x2*y0*η - x2*y0*ξ + x2*y1*ξ + x2*y1 - x2*y3*η - x2*y3 + x3*y0*ξ - x3*y0 - x3*y1*η - x3*y1*ξ + x3*y2*η + x3*y2) + (-ξ/4 - 0.25)*(2*y0*η - 2*y0 - 2*y1*η + 2*y1 + 2*y2*η + 2*y2 - 2*y3*η - 2*y3)/(x0*y1*η - x0*y1 - x0*y2*η + x0*y2*ξ - x0*y3*ξ + x0*y3 - x1*y0*η + x1*y0 - x1*y2*ξ - x1*y2 + x1*y3*η + x1*y3*ξ + x2*y0*η - x2*y0*ξ + x2*y1*ξ + x2*y1 - x2*y3*η - x2*y3 + x3*y0*ξ - x3*y0 - x3*y1*η - x3*y1*ξ + x3*y2*η + x3*y2), 0, (η/4 + 0.25)*(-2*y0*ξ + 2*y0 + 2*y1*ξ + 2*y1 - 2*y2*ξ - 2*y2 + 2*y3*ξ - 2*y3)/(x0*y1*η - x0*y1 - x0*y2*η + x0*y2*ξ - x0*y3*ξ + x0*y3 - x1*y0*η + x1*y0 - x1*y2*ξ - x1*y2 + x1*y3*η + x1*y3*ξ + x2*y0*η - x2*y0*ξ + x2*y1*ξ + x2*y1 - x2*y3*η - x2*y3 + x3*y0*ξ - x3*y0 - x3*y1*η - x3*y1*ξ + x3*y2*η + x3*y2) + (ξ/4 + 0.25)*(2*y0*η - 2*y0 - 2*y1*η + 2*y1 + 2*y2*η + 2*y2 - 2*y3*η - 2*y3)/(x0*y1*η - x0*y1 - x0*y2*η + x0*y2*ξ - x0*y3*ξ + x0*y3 - x1*y0*η + x1*y0 - x1*y2*ξ - x1*y2 + x1*y3*η + x1*y3*ξ + x2*y0*η - x2*y0*ξ + x2*y1*ξ + x2*y1 - x2*y3*η - x2*y3 + x3*y0*ξ - x3*y0 - x3*y1*η - x3*y1*ξ + x3*y2*η + x3*y2), 0, (0.25 - ξ/4)*(2*y0*η - 2*y0 - 2*y1*η + 2*y1 + 2*y2*η + 2*y2 - 2*y3*η - 2*y3)/(x0*y1*η - x0*y1 - x0*y2*η + x0*y2*ξ - x0*y3*ξ + x0*y3 - x1*y0*η + x1*y0 - x1*y2*ξ - x1*y2 + x1*y3*η + x1*y3*ξ + x2*y0*η - x2*y0*ξ + x2*y1*ξ + x2*y1 - x2*y3*η - x2*y3 + x3*y0*ξ - x3*y0 - x3*y1*η - x3*y1*ξ + x3*y2*η + x3*y2) + (-η/4 - 0.25)*(-2*y0*ξ + 2*y0 + 2*y1*ξ + 2*y1 - 2*y2*ξ - 2*y2 + 2*y3*ξ - 2*y3)/(x0*y1*η - x0*y1 - x0*y2*η + x0*y2*ξ - x0*y3*ξ + x0*y3 - x1*y0*η + x1*y0 - x1*y2*ξ - x1*y2 + x1*y3*η + x1*y3*ξ + x2*y0*η - x2*y0*ξ + x2*y1*ξ + x2*y1 - x2*y3*η - x2*y3 + x3*y0*ξ - x3*y0 - x3*y1*η - x3*y1*ξ + x3*y2*η + x3*y2), 0], [0, (η/4 - 0.25)*(2*x0*ξ - 2*x0 - 2*x1*ξ - 2*x1 + 2*x2*ξ + 2*x2 - 2*x3*ξ + 2*x3)/(x0*y1*η - x0*y1 - x0*y2*η + x0*y2*ξ - x0*y3*ξ + x0*y3 - x1*y0*η + x1*y0 - x1*y2*ξ - x1*y2 + x1*y3*η + x1*y3*ξ + x2*y0*η - x2*y0*ξ + x2*y1*ξ + x2*y1 - x2*y3*η - x2*y3 + x3*y0*ξ - x3*y0 - x3*y1*η - x3*y1*ξ + x3*y2*η + x3*y2) + (ξ/4 - 0.25)*(-2*x0*η + 2*x0 + 2*x1*η - 2*x1 - 2*x2*η - 2*x2 + 2*x3*η + 2*x3)/(x0*y1*η - x0*y1 - x0*y2*η + x0*y2*ξ - x0*y3*ξ + x0*y3 - x1*y0*η + x1*y0 - x1*y2*ξ - x1*y2 + x1*y3*η + x1*y3*ξ + x2*y0*η - x2*y0*ξ + x2*y1*ξ + x2*y1 - x2*y3*η - x2*y3 + x3*y0*ξ - x3*y0 - x3*y1*η - x3*y1*ξ + x3*y2*η + x3*y2), 0, (0.25 - η/4)*(2*x0*ξ - 2*x0 - 2*x1*ξ - 2*x1 + 2*x2*ξ + 2*x2 - 2*x3*ξ + 2*x3)/(x0*y1*η - x0*y1 - x0*y2*η + x0*y2*ξ - x0*y3*ξ + x0*y3 - x1*y0*η + x1*y0 - x1*y2*ξ - x1*y2 + x1*y3*η + x1*y3*ξ + x2*y0*η - x2*y0*ξ + x2*y1*ξ + x2*y1 - x2*y3*η - x2*y3 + x3*y0*ξ - x3*y0 - x3*y1*η - x3*y1*ξ + x3*y2*η + x3*y2) + (-ξ/4 - 0.25)*(-2*x0*η + 2*x0 + 2*x1*η - 2*x1 - 2*x2*η - 2*x2 + 2*x3*η + 2*x3)/(x0*y1*η - x0*y1 - x0*y2*η + x0*y2*ξ - x0*y3*ξ + x0*y3 - x1*y0*η + x1*y0 - x1*y2*ξ - x1*y2 + x1*y3*η + x1*y3*ξ + x2*y0*η - x2*y0*ξ + x2*y1*ξ + x2*y1 - x2*y3*η - x2*y3 + x3*y0*ξ - x3*y0 - x3*y1*η - x3*y1*ξ + x3*y2*η + x3*y2), 0, (η/4 + 0.25)*(2*x0*ξ - 2*x0 - 2*x1*ξ - 2*x1 + 2*x2*ξ + 2*x2 - 2*x3*ξ + 2*x3)/(x0*y1*η - x0*y1 - x0*y2*η + x0*y2*ξ - x0*y3*ξ + x0*y3 - x1*y0*η + x1*y0 - x1*y2*ξ - x1*y2 + x1*y3*η + x1*y3*ξ + x2*y0*η - x2*y0*ξ + x2*y1*ξ + x2*y1 - x2*y3*η - x2*y3 + x3*y0*ξ - x3*y0 - x3*y1*η - x3*y1*ξ + x3*y2*η + x3*y2) + (ξ/4 + 0.25)*(-2*x0*η + 2*x0 + 2*x1*η - 2*x1 - 2*x2*η - 2*x2 + 2*x3*η + 2*x3)/(x0*y1*η - x0*y1 - x0*y2*η + x0*y2*ξ - x0*y3*ξ + x0*y3 - x1*y0*η + x1*y0 - x1*y2*ξ - x1*y2 + x1*y3*η + x1*y3*ξ + x2*y0*η - x2*y0*ξ + x2*y1*ξ + x2*y1 - x2*y3*η - x2*y3 + x3*y0*ξ - x3*y0 - x3*y1*η - x3*y1*ξ + x3*y2*η + x3*y2), 0, (0.25 - ξ/4)*(-2*x0*η + 2*x0 + 2*x1*η - 2*x1 - 2*x2*η - 2*x2 + 2*x3*η + 2*x3)/(x0*y1*η - x0*y1 - x0*y2*η + x0*y2*ξ - x0*y3*ξ + x0*y3 - x1*y0*η + x1*y0 - x1*y2*ξ - x1*y2 + x1*y3*η + x1*y3*ξ + x2*y0*η - x2*y0*ξ + x2*y1*ξ + x2*y1 - x2*y3*η - x2*y3 + x3*y0*ξ - x3*y0 - x3*y1*η - x3*y1*ξ + x3*y2*η + x3*y2) + (-η/4 - 0.25)*(2*x0*ξ - 2*x0 - 2*x1*ξ - 2*x1 + 2*x2*ξ + 2*x2 - 2*x3*ξ + 2*x3)/(x0*y1*η - x0*y1 - x0*y2*η + x0*y2*ξ - x0*y3*ξ + x0*y3 - x1*y0*η + x1*y0 - x1*y2*ξ - x1*y2 + x1*y3*η + x1*y3*ξ + x2*y0*η - x2*y0*ξ + x2*y1*ξ + x2*y1 - x2*y3*η - x2*y3 + x3*y0*ξ - x3*y0 - x3*y1*η - x3*y1*ξ + x3*y2*η + x3*y2)], [(η/4 - 0.25)*(2*x0*ξ - 2*x0 - 2*x1*ξ - 2*x1 + 2*x2*ξ + 2*x2 - 2*x3*ξ + 2*x3)/(x0*y1*η - x0*y1 - x0*y2*η + x0*y2*ξ - x0*y3*ξ + x0*y3 - x1*y0*η + x1*y0 - x1*y2*ξ - x1*y2 + x1*y3*η + x1*y3*ξ + x2*y0*η - x2*y0*ξ + x2*y1*ξ + x2*y1 - x2*y3*η - x2*y3 + x3*y0*ξ - x3*y0 - x3*y1*η - x3*y1*ξ + x3*y2*η + x3*y2) + (ξ/4 - 0.25)*(-2*x0*η + 2*x0 + 2*x1*η - 2*x1 - 2*x2*η - 2*x2 + 2*x3*η + 2*x3)/(x0*y1*η - x0*y1 - x0*y2*η + x0*y2*ξ - x0*y3*ξ + x0*y3 - x1*y0*η + x1*y0 - x1*y2*ξ - x1*y2 + x1*y3*η + x1*y3*ξ + x2*y0*η - x2*y0*ξ + x2*y1*ξ + x2*y1 - x2*y3*η - x2*y3 + x3*y0*ξ - x3*y0 - x3*y1*η - x3*y1*ξ + x3*y2*η + x3*y2), (η/4 - 0.25)*(-2*y0*ξ + 2*y0 + 2*y1*ξ + 2*y1 - 2*y2*ξ - 2*y2 + 2*y3*ξ - 2*y3)/(x0*y1*η - x0*y1 - x0*y2*η + x0*y2*ξ - x0*y3*ξ + x0*y3 - x1*y0*η + x1*y0 - x1*y2*ξ - x1*y2 + x1*y3*η + x1*y3*ξ + x2*y0*η - x2*y0*ξ + x2*y1*ξ + x2*y1 - x2*y3*η - x2*y3 + x3*y0*ξ - x3*y0 - x3*y1*η - x3*y1*ξ + x3*y2*η + x3*y2) + (ξ/4 - 0.25)*(2*y0*η - 2*y0 - 2*y1*η + 2*y1 + 2*y2*η + 2*y2 - 2*y3*η - 2*y3)/(x0*y1*η - x0*y1 - x0*y2*η + x0*y2*ξ - x0*y3*ξ + x0*y3 - x1*y0*η + x1*y0 - x1*y2*ξ - x1*y2 + x1*y3*η + x1*y3*ξ + x2*y0*η - x2*y0*ξ + x2*y1*ξ + x2*y1 - x2*y3*η - x2*y3 + x3*y0*ξ - x3*y0 - x3*y1*η - x3*y1*ξ + x3*y2*η + x3*y2), (0.25 - η/4)*(2*x0*ξ - 2*x0 - 2*x1*ξ - 2*x1 + 2*x2*ξ + 2*x2 - 2*x3*ξ + 2*x3)/(x0*y1*η - x0*y1 - x0*y2*η + x0*y2*ξ - x0*y3*ξ + x0*y3 - x1*y0*η + x1*y0 - x1*y2*ξ - x1*y2 + x1*y3*η + x1*y3*ξ + x2*y0*η - x2*y0*ξ + x2*y1*ξ + x2*y1 - x2*y3*η - x2*y3 + x3*y0*ξ - x3*y0 - x3*y1*η - x3*y1*ξ + x3*y2*η + x3*y2) + (-ξ/4 - 0.25)*(-2*x0*η + 2*x0 + 2*x1*η - 2*x1 - 2*x2*η - 2*x2 + 2*x3*η + 2*x3)/(x0*y1*η - x0*y1 - x0*y2*η + x0*y2*ξ - x0*y3*ξ + x0*y3 - x1*y0*η + x1*y0 - x1*y2*ξ - x1*y2 + x1*y3*η + x1*y3*ξ + x2*y0*η - x2*y0*ξ + x2*y1*ξ + x2*y1 - x2*y3*η - x2*y3 + x3*y0*ξ - x3*y0 - x3*y1*η - x3*y1*ξ + x3*y2*η + x3*y2), (0.25 - η/4)*(-2*y0*ξ + 2*y0 + 2*y1*ξ + 2*y1 - 2*y2*ξ - 2*y2 + 2*y3*ξ - 2*y3)/(x0*y1*η - x0*y1 - x0*y2*η + x0*y2*ξ - x0*y3*ξ + x0*y3 - x1*y0*η + x1*y0 - x1*y2*ξ - x1*y2 + x1*y3*η + x1*y3*ξ + x2*y0*η - x2*y0*ξ + x2*y1*ξ + x2*y1 - x2*y3*η - x2*y3 + x3*y0*ξ - x3*y0 - x3*y1*η - x3*y1*ξ + x3*y2*η + x3*y2) + (-ξ/4 - 0.25)*(2*y0*η - 2*y0 - 2*y1*η + 2*y1 + 2*y2*η + 2*y2 - 2*y3*η - 2*y3)/(x0*y1*η - x0*y1 - x0*y2*η + x0*y2*ξ - x0*y3*ξ + x0*y3 - x1*y0*η + x1*y0 - x1*y2*ξ - x1*y2 + x1*y3*η + x1*y3*ξ + x2*y0*η - x2*y0*ξ + x2*y1*ξ + x2*y1 - x2*y3*η - x2*y3 + x3*y0*ξ - x3*y0 - x3*y1*η - x3*y1*ξ + x3*y2*η + x3*y2), (η/4 + 0.25)*(2*x0*ξ - 2*x0 - 2*x1*ξ - 2*x1 + 2*x2*ξ + 2*x2 - 2*x3*ξ + 2*x3)/(x0*y1*η - x0*y1 - x0*y2*η + x0*y2*ξ - x0*y3*ξ + x0*y3 - x1*y0*η + x1*y0 - x1*y2*ξ - x1*y2 + x1*y3*η + x1*y3*ξ + x2*y0*η - x2*y0*ξ + x2*y1*ξ + x2*y1 - x2*y3*η - x2*y3 + x3*y0*ξ - x3*y0 - x3*y1*η - x3*y1*ξ + x3*y2*η + x3*y2) + (ξ/4 + 0.25)*(-2*x0*η + 2*x0 + 2*x1*η - 2*x1 - 2*x2*η - 2*x2 + 2*x3*η + 2*x3)/(x0*y1*η - x0*y1 - x0*y2*η + x0*y2*ξ - x0*y3*ξ + x0*y3 - x1*y0*η + x1*y0 - x1*y2*ξ - x1*y2 + x1*y3*η + x1*y3*ξ + x2*y0*η - x2*y0*ξ + x2*y1*ξ + x2*y1 - x2*y3*η - x2*y3 + x3*y0*ξ - x3*y0 - x3*y1*η - x3*y1*ξ + x3*y2*η + x3*y2), (η/4 + 0.25)*(-2*y0*ξ + 2*y0 + 2*y1*ξ + 2*y1 - 2*y2*ξ - 2*y2 + 2*y3*ξ - 2*y3)/(x0*y1*η - x0*y1 - x0*y2*η + x0*y2*ξ - x0*y3*ξ + x0*y3 - x1*y0*η + x1*y0 - x1*y2*ξ - x1*y2 + x1*y3*η + x1*y3*ξ + x2*y0*η - x2*y0*ξ + x2*y1*ξ + x2*y1 - x2*y3*η - x2*y3 + x3*y0*ξ - x3*y0 - x3*y1*η - x3*y1*ξ + x3*y2*η + x3*y2) + (ξ/4 + 0.25)*(2*y0*η - 2*y0 - 2*y1*η + 2*y1 + 2*y2*η + 2*y2 - 2*y3*η - 2*y3)/(x0*y1*η - x0*y1 - x0*y2*η + x0*y2*ξ - x0*y3*ξ + x0*y3 - x1*y0*η + x1*y0 - x1*y2*ξ - x1*y2 + x1*y3*η + x1*y3*ξ + x2*y0*η - x2*y0*ξ + x2*y1*ξ + x2*y1 - x2*y3*η - x2*y3 + x3*y0*ξ - x3*y0 - x3*y1*η - x3*y1*ξ + x3*y2*η + x3*y2), (0.25 - ξ/4)*(-2*x0*η + 2*x0 + 2*x1*η - 2*x1 - 2*x2*η - 2*x2 + 2*x3*η + 2*x3)/(x0*y1*η - x0*y1 - x0*y2*η + x0*y2*ξ - x0*y3*ξ + x0*y3 - x1*y0*η + x1*y0 - x1*y2*ξ - x1*y2 + x1*y3*η + x1*y3*ξ + x2*y0*η - x2*y0*ξ + x2*y1*ξ + x2*y1 - x2*y3*η - x2*y3 + x3*y0*ξ - x3*y0 - x3*y1*η - x3*y1*ξ + x3*y2*η + x3*y2) + (-η/4 - 0.25)*(2*x0*ξ - 2*x0 - 2*x1*ξ - 2*x1 + 2*x2*ξ + 2*x2 - 2*x3*ξ + 2*x3)/(x0*y1*η - x0*y1 - x0*y2*η + x0*y2*ξ - x0*y3*ξ + x0*y3 - x1*y0*η + x1*y0 - x1*y2*ξ - x1*y2 + x1*y3*η + x1*y3*ξ + x2*y0*η - x2*y0*ξ + x2*y1*ξ + x2*y1 - x2*y3*η - x2*y3 + x3*y0*ξ - x3*y0 - x3*y1*η - x3*y1*ξ + x3*y2*η + x3*y2), (0.25 - ξ/4)*(2*y0*η - 2*y0 - 2*y1*η + 2*y1 + 2*y2*η + 2*y2 - 2*y3*η - 2*y3)/(x0*y1*η - x0*y1 - x0*y2*η + x0*y2*ξ - x0*y3*ξ + x0*y3 - x1*y0*η + x1*y0 - x1*y2*ξ - x1*y2 + x1*y3*η + x1*y3*ξ + x2*y0*η - x2*y0*ξ + x2*y1*ξ + x2*y1 - x2*y3*η - x2*y3 + x3*y0*ξ - x3*y0 - x3*y1*η - x3*y1*ξ + x3*y2*η + x3*y2) + (-η/4 - 0.25)*(-2*y0*ξ + 2*y0 + 2*y1*ξ + 2*y1 - 2*y2*ξ - 2*y2 + 2*y3*ξ - 2*y3)/(x0*y1*η - x0*y1 - x0*y2*η + x0*y2*ξ - x0*y3*ξ + x0*y3 - x1*y0*η + x1*y0 - x1*y2*ξ - x1*y2 + x1*y3*η + x1*y3*ξ + x2*y0*η - x2*y0*ξ + x2*y1*ξ + x2*y1 - x2*y3*η - x2*y3 + x3*y0*ξ - x3*y0 - x3*y1*η - x3*y1*ξ + x3*y2*η + x3*y2)]])
	#	σ_gauss[i,:] = Eσ @ B @ u_e
	#σ = zeros((4,3))

	#σ[:,0] = M@σ_gauss[:,0]
	#σ[:,1] = M@σ_gauss[:,1]
	#σ[:,2] = M@σ_gauss[:,2]

	return M@σ





"""
if __name__ == '__main__':
	xy = array([
	[0  ,0  ],
	[1  ,0  ],
	[1  ,1  ],
	[0  ,1  ],
	[0.5,0  ],
	[1  ,0.5],
	[0.5,1  ],
	[0  ,0.5],
	[0.5,0.5],
		])
	from matplotlib import pylab as plt

	for node in xy:
		plt.plot(node[0],node[1],'sr')
	
	properties = {}
	properties["E"] = 1.
	properties["nu"] = 0.25
	properties["bx"] = 0
	properties["by"] = 1.
	properties["t"] = 1.
	
	ke, fe = quad9(xy,properties)
	ε, σ = quad9_post(xy, 0, properties)
	quad9_stress_average(σ, xy, properties)
	
	print(f'ke_shape = {ke.shape}')
	print(f"ke = {ke}")
	plt.show()
"""